spring:
  application:
    name: spring-ai-test
  ai:
    model:
      chat: openai  # 채팅 모델명, 자동 구성됨, audio speech, transcription 등 개별적으로 모델 설정시 사용.
      image:
      audio:
        speech:
        transcription:
    openai:
      api-key: ${OPEN_AI_API_KEY}
      base-url: api.openai.com # 기본 값임.
      organization-id: # 조직 ID, 선택 사항
      project-id: # 프로젝트 ID, 선택 사항
      chat:
        # enable: true OpenAi 채팅 모델 활성화(사용되지 않음. 현재는 spring.ai.model.chat 으로 사용)
        base-url: # 상위 base-url 재정의 시 사용,
        options:
          # 모델명. gpt-4o, gpt-4o-mini, gpt-4-turbo, gpt-3.5-turbo 등
          model: gpt-4o-mini

          # 온도. 0에서 1 사이의 숫자.
          # * 높으면 출력 무작위, 낮으면 출력 결정적.
          # * top_p 나 해당 값 하나만 변경하는 것이 권장됨. 둘 다 변경은 권장되지 않음.
          # * 기본값: 0.8
          temperature: 0.8

          # Top p.
          # 1. 모델이 에측한 다음 단어의 확률 분포 중 확률이 가장 큰 것 부터 확률을 더함
          # 2. top-p 값(ex: 0.9 = 90%)에 도달했을 경우 멈춤.
          # 3. 지금까지 더했던 확률 분포 내 단어 중 무작위로 출력.
          # * 높으면 출력 무작위, 낮으면 출력 결정적.
          # * top_p 나 해당 값 하나만 변경하는 것이 권장됨. 둘 다 변경은 권장되지 않음.
          top-p:

          # 응답 성격
          # * -2.0에서 2.0 사이의 숫자
          # * 양수: 이미 등장한 단어나 구의 패널티 적용(창의적)
          # * 음수: 이미 등장한 단어나 구의 재사용 장려(코딩)
          # 토큰이 "얼마나 자주(frequency)" 등장했는지로 판단하여 패널티 적용
          frequency-penalty: 0.0f
            # 특정 토큰이 나타날 가능성 설정(Int)
          # * -1 ~ 1 사이는 미세한 확률 조정, -100: 해당 토큰 거의 금지, 100: 해당 단어 거의 확실히 선택
          #          logit-bias:
          #            "50256": -100
          #            "1234": 50
          max-tokens: # (Deprecated) 채팅 응답으로 생성할 최대 토큰 수. maxCompletionTokens으로 대체됨.
          max-completion-tokens: # 사용자가 실제로 보는 텍스트 토큰(가시적인 출력 토큰)과  + 답변 생성을 위해 내부적으로 사용하는 토큰(추론 토큰)을 포함하여, 완성을 위해 생성될 수 있는 토큰 수의 상한선
          n: 1 # 하나의 프롬프트에 대해 생성할 응답의 수. 창의적 작업 등에 사용.
          store: false # OpenAI 자체 모댈 개선 목적으로 채팅 출력을 저장할 지 여부

          # OpenAI API 호출 시 해당 메타데이터가 함께 전송되어 OpenAI 대시보드에서 해당 태그로 필터링 가능
          metadata:
            project: "user-support"
            feature: "document-qa"
            version: "1.0"
            hello: "world"

          # 여러 형태의 출력 형태(modalities)로 요청할 때 사용
          # * audio 형식은 스트리밍 완성(streaming completions) 에서는 지원하지 않음
          # * audio 형식은 gpt-4o-preview 모델에서만 사용 가능
          # * 기본값: 없음(텍스트)
          output-modalities:
          #  - text
          #  - audio

          # 오디오 생성 시 필요한 오디오 파라미터 목록
          # * output-modalities에 "audio"가 포함되었을 때 반드시 설정해야함.
          # * 스트리밍 완성(streaming completions) 에서는 지원하지 않음
          # * gpt-4o-preview 모델에서만 사용 가능
          output-audio:
            # 음성 유형 ("alloy", "echo", "fable", "onyx", "nova" 등)
            voice: nova
            # 오디오 파일 형식 (OpenAI 는 mp3, wav 두 가지 형식만 지원함)
            format: mp3

          # 새로운 주제로 넘어가는 경향을 조절함.
          # * -2.0 ~ 2.0 사이의 값
          # * 양수: 이미 등장한 토큰에 패널티를 부여해 새로운 주제에 대한 이야기할 가능성이 높아짐.
          # * 음수: 이미 등장한 토큰의 재사용을 장려해 기존 주제에 더 집중함.
          # 토큰이 "존재했는지(presence)" 여부만 고려함
          presence-penalty:

          # 응답 형식 포맷
          response-format:
            # text, json_object, json_schema
            type: text

            # JSON 스키마 이름
            # * type: json_schema 인 경우에만 적용됨
            # * 기본값: "custom_schema"
            name: custom_schema

            # JSON 스키마
            # * type: json_schema 인 경우에만 적용됨
#            schema: |
#              {
#                "type": "object",
#                "properties": {
#                  "steps": {
#                    "type": "array",
#                    "items": {
#                      "type": "object",
#                      "properties": {
#                        "explanation": { "type": "string" },
#                        "output": { "type":"string" }
#                      },
#                      "required": ["explanation", "output"],
#                      "additionalProperties": false
#                    }
#                  },
#                  "final_answer": { "type": "string"}
#                },
#                "required": ["steps", "final_answer"],
#                "additionalProperties": false
#              }

            # JSON 스키마를 엄격하게 따를지 여부
            # * type: json_schema 인 경우에만 적용됨
            strict:

          # 동일한 입력에 대해 동일한 응답을 생성하도록 하는 기능(결정론적 샘플링).
          # * Integer
          # * 반드시 동일한 응답이 오진 않음
          # 응답의 system_fingerprint 를 모니터링 해야함.
          seed:

          # 토큰 생성 중지 문자열 배열
          # * 최대 4개까지 등록 가능
          stop:
            - ":q!"
            - "exit"

          # 도구 정의. 현재는 type: function만 지원함.
          tools:
            - type: function
              function:
                name: "get_weather"
                description: "Get the current weather in a given location"
                parameters:
                  type: object
                  properties:
                    location:
                      type: string
                      description: "The city and state, e.g. San Francisco, CA"
                    unit:
                      type: string
                      enum:
                        - "celsius"
                        - "fahrenheit"
                  required:
                    - "location"

          # 모델이 대화 중에 어떤 함수를 호출 할지 선택함.
          # * none: 함수를 호출하지 않고 모델이 메시지를 생성함. 함수가 없을 경우 기본값.
          # * auto: 모델이 메시지 생성과 함수 호출 중에서 선택함. 함수가 있을 경우 기본값.
          # * 함수를 직접 지정할 수도 있음
          # * ex: {"type": "function", "function": {"name": "get_weather"}}
          # * 이 경우 모델이 해당 함수를 반드시 호출함.
          tool-choice: "none"
#            type: function
#            function:
#              name: "get_weather"

          # 사용자 고유 식별자
          # * OpenAI 에서 남용 모니터링하는데 사용함.
          user:



        completions-path: /v1/chat/completions # OpenAI의 채팅 완성 API에 요청을 보낼 때 사용하는 경로(기본 값임)
        api-key: ${OPEN_AI_API_KEY} # 상위 api-key 재정의 시 사용
        organization-id: # 상위 조직 ID 재정의 시 사용, 선택 사항
        project-id: # 프로젝트 ID 재정의 시 사용, 선택 사항
    retry:
      max-attempts: 10 # 재시도 횟수
      # 지수 백오프 목적
      # 1. 외부 AI 서비스가 과부하 상태일 때, 재시도 간격을 점점 늘려 서비스에 불필요한 부하를 주지 않음.
      # 2. 즉시 재시도하지 않고 점진적으로 간격을 늘리 네트워크 및 시스템 자원을 효율적으로 사용.
      # 3. 시간이 지나면 문제가 해결될 수 있는 일시적인 네트워크 문제나 서비스 중단의 경우도 있어 점점 더 긴 간격으로 재시도하는 것이 효과적.
      backoff:
        initial-interval: 2000ms # 지수 백오프 초기 대기 시간, 작업 실패 시 각 재시도마다 대기시간이 점점 길어짐.
        multiplier: 5 # 백오프 간격 배수, 첫 번째 실패 후 initial-interval 값만큼 대기, 그 이후 해당 값을 곱한 만큼 대기
        max-interval: 3m # 재시도 백오프 최대 간격(지수 함수 식으로 늘어날 경우 무한정 증가하는 것을 방지), 기본값 3분
      on-client-errors: false # 4xx 클라이언트 오류 발생 시 재시도를 하지 않고 NonTransientAiException을 발생시킴.
      # on-client-errors: true # 4xx 클라이언트 오류 발생 시 재시도 정책에 따라 재시도함(rate limiting - 429 오류에 효과적이나 클라이언트 오류이므로 false 값 권장)
      exclude-on-http-codes: # 재시도를 하지 않는 HTTP 상태 코드 목록, NonTransientAiException을 발생 시킴. 재시도해도 해결되지 않는 오류의 재시도 방지용
      # ex: exclude-on-http-codes: 400, 401, 402, 403, 404
      on-http-codes: # 재시도해야하는 HTTP 상태 코드 목록, TransientAiException을 발생시키고, 재시도함. 화이트리스트 접근 방식.
      # ex: on-http-codes: 429, 503, 504
    chat:
      client:
        enabled: true